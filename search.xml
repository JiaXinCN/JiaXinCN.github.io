<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA['Python计算环境--NumPy（二）']]></title>
    <url>%2F2019%2F04%2F26%2FPython%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83-NumPy%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python计算环境——NumPy库(一)]]></title>
    <url>%2F2019%2F04%2F18%2FPython%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83-NumPy%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[参考：NumPy 教程：http://www.runoob.com/numpy/numpy-tutorial.htmlNumPy 中文文档：http://www.runoob.com/numpy/numpy-tutorial.htmlPandas 中文文档：http://www.runoob.com/numpy/numpy-tutorial.htmlMatplotlivb 教程：http://www.runoob.com/numpy/numpy-tutorial.html 概述NumPy（Numerical Python）是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库，其中包含： 一个强大的N维数组对象 ndarray 广播功能函数 整合 C/C++/Fortran 代码的工具 线性代数、傅里叶变换、随机数生成等功能 NumPy 通常与 SciPy 和 Matplotlib 一起使用，是一个强大的科学计算环境。 SciPy库 SciPy 是一个开源的 Python 算法库和数学工具包。SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。 Matplotlib库 Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter,、wxPython、Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。 Ndarray 对象ndarray 对象是一个 N 维数组对象，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。 创建数组可以通过numpy模块中的常用的几个函数进行创建ndarray多维数组对象，主要函数如下： array 函数：将输入数据（列表、元组、数组或其他序列类型）转换为 ndarray。要么推断出 dtype，要么显示指定的dtype。默认直接复制输入数据。 numpy.array(object,dtype = None,copy = True,order = None,subok = False, ndmin = 0) ones、ones_like 函数：创建指定长度或者形状的全 1 数组。ones_like 以另一个数组为参数，并跟据其形状和 dtype 创建一个全为 1 的数组。 numpy.ones(shape, dtype = None, order = &#39;C&#39;) zeros、zeros_like 函数：创建指定长度或者形状的全零数组。 numpy.zeros(shape, dtype = float, order = &#39;C&#39;) empty、empty_like 函数：创建一个没有任何具体值的数组（准备地说是创建一些未初始化的ndarray多维数组） 不使用，会产生垃圾值。 numpy.empty(shape, dtype = float, order = &#39;C&#39;) eye、identity 函数：创建一个正方的 N×N 单位矩阵（对角线为1，其余为0）。 eye(N) 一些参数说明 名称 描述 object 数组或嵌套的数列 dtype 数组元素的数据类型，可选 copy 对象是否需要复制，可选 order 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认） subok 默认返回一个与基类类型一致的数组 ndmin 指定生成数组的最小维度 shape 数组形状 从已有的数组创建数组（一些参数已在上表列出）： asarry 函数：将输入转换为 ndarry，如果输入本身就是一个 ndarry 就不进行复制。 numpy.asarray(a, dtype = None, order = None) 参数说明： a：任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组。 12345678910111213import numpy as np # 示例 x = [1,2,3] a = np.asarray(x) x = (1,2,3) a = np.asarray(x) x = [(1,2,3),(4,5)] a = np.asarray(x)x = [1,2,3] a = np.asarray(x, dtype = float) frombuffer函数：用于实现动态数组，接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。 numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0) 参数说明： buffer：可以是任意对象，会以流的形式读入。 注：buffer 是字符串的时候，Python3 默认 str 是 Unicode 类型，所以要转成 bytestring 在原 str 前加上 b。 count：读取的数据数量，默认为-1，读取所有数据。 offset：读取的起始位置，默认为0。 1234567import numpy as nps = b'Hello World' a = np.frombuffer(s, dtype = 'S1')print(a)# 结果如下：# [b'H' b'e' b'l' b'l' b'o' b' ' b'W' b'o' b'r' b'l' b'd'] fromiter函数：方法从可迭代对象中建立 ndarray 对象，返回一维数组。 numpy.fromiter(iterable, dtype, count=-1) 参数说明： iterable：可迭代对象 dtype：返回数组的数据类型 count：读取的数据数量，默认为-1，读取所有数据 123456789import numpy as np # 使用 range 函数创建列表对象 list=range(5)it=iter(list) # 使用迭代器创建 ndarray x=np.fromiter(it, dtype=float)print(x) arange 函数：类似于内置的 range，但返回的是一个ndarray而不是列表对象，根据 start 与 stop 指定的范围以及 step 设定的步长，生成一个 ndarray。 numpy.arange(start, stop, step, dtype) 参数说明： 参数 描述 start 起始值，默认为0 stop 终止值（不包含） step 步长，默认为1 dtype 返回ndarray的数据类型，如果没有提供，则会使用输入数据的类型。 linspace 函数：用于创建一个一维数组，数组是一个等差数列构成的。 np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)| 参数 | 描述 || ———- | ———————————————————— || start | 序列的起始值 || stop | 序列的终止值，如果endpoint为true，该值包含于数列中 || num | 要生成的等步长的样本数量，默认为50 || endpoint | 该值为 ture 时，数列中中包含stop值，反之不包含，默认是True。 || retstep | 如果为 True 时，生成的数组中会显示间距，反之不显示。 || dtype | ndarray 的数据类型 | logspace 函数：用于创建一个于等比数列。 np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None) base 参数意思是取对数的时候 log 的下标。 | 参数 | 描述 || ———- | ———————————————————— || start | 序列的起始值为：base start || stop | 序列的终止值为：base stop。如果endpoint为true，该值包含于数列中 || num | 要生成的等步长的样本数量，默认为50 || endpoint | 该值为 ture 时，数列中中包含stop值，反之不包含，默认是True。 || base | 对数 log 的底数。 || dtype | ndarray 的数据类型 | 数据类型（dtype）通过astype方法显式地转换dtype 12345678import numpy as nparr = np.array([[1,2,3],[2,3,4],[3,4,5]]) # 创建数组arr.dtype # 返回数组类型，此时应为'int64' # 转换数据类型 float_arr = arr.dtype(np.float64)arr.dtype # 返回数组类型，此时应为'float64' 数组属性 属性 说明 ndarray.ndim 秩，即轴的数量或维度的数量 ndarray.shape 数组的维度，对于矩阵，n 行 m 列 ndarray.size 数组元素的总个数，相当于 .shape 中 n×m 的值 ndarray.dtype ndarray 对象的元素类型 ndarray.itemsize ndarray 对象中每个元素的大小，以字节为单位 ndarray.flags ndarray 对象的内存信息 ndarray.real ndarray元素的实部 ndarray.imag ndarray 元素的虚部 ndarray.data 包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性 切片和索引与 python 中列表操作相同：start:stop:step 高级索引整数数组索引1234567891011121314151617import numpy as np x = np.array([[ 0, 1, 2],[ 3, 4, 5],[ 6, 7, 8],[ 9, 10, 11]]) print ('我们的数组是：' )print (x)print ('\n')rows = np.array([[0,0],[3,3]]) cols = np.array([[0,2],[0,2]]) y = x[rows,cols] print ('这个数组的四个角元素是：')print (y)a = np.array([[1,2,3], [4,5,6],[7,8,9]])b = a[1:3, 1:3]c = a[1:3,[1,2]]print(b)print(c) 布尔索引123456789import numpy as np x = np.array([[ 0, 1, 2],[ 3, 4, 5],[ 6, 7, 8],[ 9, 10, 11]]) print ('我们的数组是：')print (x)print ('\n')# 现在我们会打印出大于 5 的元素 print ('大于 5 的元素是：')print (x[x &gt; 5]) 12345678910import numpy as np# 使用了 ~（取补运算符）来过滤 NaNa = np.array([np.nan, 1,2,np.nan,3,4,5]) print(a) print (a[~np.isnan(a)])# 滤掉非复数元素a = np.array([1, 2+6j, 5, 3.5+5j]) print (a[np.iscomplex(a)]) 花式索引1234567891011import numpy as np # 取行元素x=np.arange(32).reshape((8,4))print(x)print('\n')print (x[[4,2,1,7]]) # 取4、2、1、7行（从0行开始）print('\n')print (x[[-4,-2,-1,-7]]) # 同理print('\n')print (x[np.ix_([1,5,7,2],[0,3,1,2])]) # 先取行，接着调整行的顺序 广播（Broadcast）广播(Broadcast)是 numpy 对不同形状(shape)的数组进行数值计算的方式，对数组的算术运算通常在相应的元素上进行。 如果两个数组 a 和 b 形状相同，即满足 a.shape == b.shape，那么 a*b 的结果就是 a 与 b 数组对应位相乘。这要求维数相同，且各维度的长度相同。 123456import numpy as np a = np.array([1,2,3,4]) b = np.array([10,20,30,40]) c = a * b print (c) 当运算中的 2 个数组的形状不同时，numpy 将自动触发广播机制。 12345678910111213a = np.array([[ 0, 0, 0], [10,10,10], [20,20,20], [30,30,30]])b = np.array([1,2,3])# 广播机制：# tile 函数将扩充为4行1列# 与a数组形状相同# bb = np.tile(b, (4, 1))# print(a+bb)print(a + b) 广播的规则: 让所有输入数组都向其中形状最长的数组看齐，形状中不足的部分都通过在前面加 1 补齐。 输出数组的形状是输入数组形状的各个维度上的最大值。 如果输入数组的某个维度和输出数组的对应维度的长度相同或者其长度为 1 时，这个数组能够用来计算，否则出错。 当输入数组的某个维度的长度为 1 时，沿着此维度运算时都用此维度上的第一组值。 简单理解：对两个数组，分别比较他们的每一个维度（若其中一个数组没有当前维度则忽略），满足： 数组拥有相同形状。 当前维度的值相等。 当前维度的值有一个是 1。 若条件不满足，抛出 “ValueError: frames are not aligned” 异常。 Numpy 读写Numpy 可以读写磁盘上的文本数据或二进制数据。 NumPy 为 ndarray 对象引入了一个简单的文件格式：npy。 npy 文件用于存储重建 ndarray 所需的数据、图形、dtype 和其他信息。 常用的 IO 函数有： load() 和 save() 函数是读写文件数组数据的两个主要函数，默认情况下，数组是以未压缩的原始二进制格式保存在扩展名为 .npy 的文件中。 savze() 函数用于将多个数组写入文件，默认情况下，数组是以未压缩的原始二进制格式保存在扩展名为 .npz 的文件中。 loadtxt() 和 savetxt() 函数处理正常的文本文件(.txt 等) numpy.save()numpy.save() 函数将数组保存到以 .npy 为扩展名的文件中。 1numpy.save(file, arr, allow_pickle=True, fix_imports=True) 参数说明： file：要保存的文件，扩展名为 .npy，如果文件路径末尾没有扩展名 .npy，该扩展名会被自动加上。 arr: 要保存的数组 allow_pickle: 可选，布尔值，允许使用 Python pickles 保存对象数组，Python 中的 pickle 用于在保存到磁盘文件或从磁盘文件读取之前，对对象进行序列化和反序列化。 fix_imports: 可选，为了方便 Pyhton2 中读取 Python3 保存的数据 123456789import numpy as np a = np.array([1,2,3,4,5]) # 保存到 outfile.npy 文件上np.save('outfile.npy',a) # 保存到 outfile2.npy 文件上，如果文件路径末尾没有扩展名 .npy，该扩展名会被自动加上np.save('outfile2',a) numpy.load()1234import numpy as np b = np.load('outfile.npy') print (b) numpy.savez()1numpy.savez(file, *args, **kwds) 参数说明： file：要保存的文件，扩展名为 .npz，如果文件路径末尾没有扩展名 .npz，该扩展名会被自动加上。 args：要保存的数组，可以使用关键字参数为数组起一个名字，非关键字参数传递的数组会自动起名为 arr_0, arr_1, … 。 kwds：要保存的数组使用关键字名称 123456789101112import numpy as np a = np.array([[1,2,3],[4,5,6]])b = np.arange(0, 1.0, 0.1)c = np.sin(b)# c 使用了关键字参数 sin_arraynp.savez("runoob.npz", a, b, sin_array = c)r = np.load("runoob.npz") print(r.files) # 查看各个数组名称print(r["arr_0"]) # 数组 aprint(r["arr_1"]) # 数组 bprint(r["sin_array"]) # 数组 c savetxt() &amp; loadtxt()savetxt() 函数是以简单的文本文件格式存储数据，对应的使用 loadtxt() 函数来获取数据。 12np.loadtxt(FILENAME, dtype=int, delimiter=' ')np.savetxt(FILENAME, a, fmt="%d", delimiter=",") 1234567import numpy as np a = np.array([1,2,3,4,5]) np.savetxt('out.txt',a) b = np.loadtxt('out.txt') print(b)]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客新增/删除文章]]></title>
    <url>%2F2019%2F04%2F17%2Fhexo%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[成功搭建好了以hexo为框架的个人博客，并且成功的将其部署在github网站上，地址为：https://jiaxincn.github.io，接下来就要对个人博客进行管理和更新了。 搭建过程请参考 NexT主题 文档：http://theme-next.iissnan.com/ 删除文章以建立hexo个人博客的时候创建的文章 Hellow World 为例说明删除文章的过程： 删除本地文件进入到 \sourse\_post 文件夹下，找到hellowworld.md 文件，执行本地删除； 生成静态文件启动命令行，进入 blog 文件夹中，在命令行中执行如下命令： 1hexo g 小提示：在某些情况，如果发现您对站点的更改无论如何也不生效，您可能需要运行 clean 命令hexo clean 将博客部署到 github 上启动命令行，进入 blog 文件夹中，在命令行中执行如下命令：1hexo d 创建文章创建文章的方法与删除文章类似，具体过程如下： 创建本地博客文章启动命令行，进入 blog 文件夹中，在命令行中执行如下命令： 1hexo new "My New Post" 编写博客文章在 \sourse\_post 中，找到新建的文章 My New Post，使用编辑器编写博客文章； 生成静态文件步骤与删除文件中步骤 2 相同； 12hexo cleanhexo g 将博客部署到 github 上步骤与删除文件中步骤 3 相同； 1hexo d]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
      </tags>
  </entry>
</search>
