<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python计算环境——NumPy库]]></title>
    <url>%2F2019%2F04%2F18%2FPython%E8%AE%A1%E7%AE%97%E7%8E%AF%E5%A2%83%E2%80%94%E2%80%94NumPy%2F</url>
    <content type="text"><![CDATA[参考：NumPy 教程：http://www.runoob.com/numpy/numpy-tutorial.htmlNumPy 中文文档：http://www.runoob.com/numpy/numpy-tutorial.htmlPandas 中文文档：http://www.runoob.com/numpy/numpy-tutorial.htmlMatplotlivb 教程：http://www.runoob.com/numpy/numpy-tutorial.html 概述NumPy（Numerical Python）是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库，其中包含： 一个强大的N维数组对象 ndarray 广播功能函数 整合 C/C++/Fortran 代码的工具 线性代数、傅里叶变换、随机数生成等功能 NumPy 通常与 SciPy 和 Matplotlib 一起使用，是一个强大的科学计算环境。 SciPy库 SciPy 是一个开源的 Python 算法库和数学工具包。SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。 Matplotlib库 Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter,、wxPython、Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。 Ndarray 对象ndarray 对象是一个 N 维数组对象，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。 创建数组可以通过numpy模块中的常用的几个函数进行创建ndarray多维数组对象，主要函数如下： array 函数：将输入数据（列表、元组、数组或其他序列类型）转换为 ndarray。要么推断出 dtype，要么显示指定的dtype。默认直接复制输入数据。 numpy.array(object,dtype = None,copy = True,order = None,subok = False, ndmin = 0) ones、ones_like 函数：创建指定长度或者形状的全 1 数组。ones_like 以另一个数组为参数，并跟据其形状和 dtype 创建一个全为 1 的数组。 numpy.ones(shape, dtype = None, order = &#39;C&#39;) zeros、zeros_like 函数：创建指定长度或者形状的全零数组。 numpy.zeros(shape, dtype = float, order = &#39;C&#39;) empty、empty_like 函数：创建一个没有任何具体值的数组（准备地说是创建一些未初始化的ndarray多维数组） 不使用，会产生垃圾值。 numpy.empty(shape, dtype = float, order = &#39;C&#39;) eye、identity 函数：创建一个正方的 N×N 单位矩阵（对角线为1，其余为0）。 eye(N) 一些参数说明 名称 描述 object 数组或嵌套的数列 dtype 数组元素的数据类型，可选 copy 对象是否需要复制，可选 order 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认） subok 默认返回一个与基类类型一致的数组 ndmin 指定生成数组的最小维度 shape 数组形状 从已有的数组创建数组（一些参数已在上表列出）： asarry 函数：将输入转换为 ndarry，如果输入本身就是一个 ndarry 就不进行复制。 numpy.asarray(a, dtype = None, order = None) 参数说明： a：任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组。 1234567891011121314&gt; &gt; import numpy as np &gt; &gt; # 示例 &gt; &gt; x = [1,2,3] &gt; &gt; a = np.asarray(x) &gt; &gt; &gt; &gt; x = (1,2,3) &gt; &gt; a = np.asarray(x) &gt; &gt; &gt; &gt; x = [(1,2,3),(4,5)] &gt; &gt; a = np.asarray(x)&gt; &gt; &gt; &gt; x = [1,2,3] &gt; &gt; a = np.asarray(x, dtype = float) &gt; &gt; frombuffer函数：用于实现动态数组，接受 buffer 输入参数，以流的形式读入转化成 ndarray 对象。 numpy.frombuffer(buffer, dtype = float, count = -1, offset = 0) 参数说明： buffer：可以是任意对象，会以流的形式读入。 注：buffer 是字符串的时候，Python3 默认 str 是 Unicode 类型，所以要转成 bytestring 在原 str 前加上 b。 count：读取的数据数量，默认为-1，读取所有数据。 offset：读取的起始位置，默认为0。 12345678&gt; &gt; import numpy as np&gt; &gt; &gt; &gt; s = b'Hello World' &gt; &gt; a = np.frombuffer(s, dtype = 'S1')&gt; &gt; print(a)&gt; &gt; # 结果如下：&gt; &gt; # [b'H' b'e' b'l' b'l' b'o' b' ' b'W' b'o' b'r' b'l' b'd']&gt; &gt; fromiter函数：方法从可迭代对象中建立 ndarray 对象，返回一维数组。 numpy.fromiter(iterable, dtype, count=-1) 参数说明： iterable：可迭代对象 dtype：返回数组的数据类型 count：读取的数据数量，默认为-1，读取所有数据 12345678910&gt; &gt; import numpy as np &gt; &gt; &gt; &gt; # 使用 range 函数创建列表对象 &gt; &gt; list=range(5)&gt; &gt; it=iter(list)&gt; &gt; &gt; &gt; # 使用迭代器创建 ndarray &gt; &gt; x=np.fromiter(it, dtype=float)&gt; &gt; print(x)&gt; &gt; arange 函数：类似于内置的 range，但返回的是一个ndarray而不是列表对象，根据 start 与 stop 指定的范围以及 step 设定的步长，生成一个 ndarray。 numpy.arange(start, stop, step, dtype) 参数说明： | 参数 | 描述 || ——- | :———————————————————-: || start | 起始值，默认为0 || stop | 终止值（不包含） || step | 步长，默认为1 || dtype | 返回ndarray的数据类型，如果没有提供，则会使用输入数据的类型。 | linspace 函数：用于创建一个一维数组，数组是一个等差数列构成的。 np.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)| 参数 | 描述 || ———- | ———————————————————— || start | 序列的起始值 || stop | 序列的终止值，如果endpoint为true，该值包含于数列中 || num | 要生成的等步长的样本数量，默认为50 || endpoint | 该值为 ture 时，数列中中包含stop值，反之不包含，默认是True。 || retstep | 如果为 True 时，生成的数组中会显示间距，反之不显示。 || dtype | ndarray 的数据类型 | logspace 函数：用于创建一个于等比数列。 np.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None) base 参数意思是取对数的时候 log 的下标。 | 参数 | 描述 || ———- | ———————————————————— || start | 序列的起始值为：base start || stop | 序列的终止值为：base stop。如果endpoint为true，该值包含于数列中 || num | 要生成的等步长的样本数量，默认为50 || endpoint | 该值为 ture 时，数列中中包含stop值，反之不包含，默认是True。 || base | 对数 log 的底数。 || dtype | ndarray 的数据类型 | 数据类型（dtype）通过astype方法显式地转换dtype 123456789&gt; &gt; import numpy as np&gt; &gt; arr = np.array([[1,2,3],[2,3,4],[3,4,5]]) # 创建数组&gt; &gt; arr.dtype # 返回数组类型，此时应为'int64'&gt; &gt; &gt; &gt; # 转换数据类型 &gt; &gt; float_arr = arr.dtype(np.float64)&gt; &gt; &gt; &gt; arr.dtype # 返回数组类型，此时应为'float64'&gt; &gt; 数组属性 属性 说明 ndarray.ndim 秩，即轴的数量或维度的数量 ndarray.shape 数组的维度，对于矩阵，n 行 m 列 ndarray.size 数组元素的总个数，相当于 .shape 中 n×m 的值 ndarray.dtype ndarray 对象的元素类型 ndarray.itemsize ndarray 对象中每个元素的大小，以字节为单位 ndarray.flags ndarray 对象的内存信息 ndarray.real ndarray元素的实部 ndarray.imag ndarray 元素的虚部 ndarray.data 包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性 切片和索引]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>-Python -NumPy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客新增/删除文章]]></title>
    <url>%2F2019%2F04%2F17%2Fhexo%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%A2%9E-%E5%88%A0%E9%99%A4%E6%96%87%E7%AB%A0%2F</url>
    <content type="text"><![CDATA[成功搭建好了以hexo为框架的个人博客，并且成功的将其部署在github网站上，地址为：https://jiaxincn.github.io，接下来就要对个人博客进行管理和更新了。 搭建过程请参考 NexT主题 文档：http://theme-next.iissnan.com/ 删除文章以建立hexo个人博客的时候创建的文章 Hellow World 为例说明删除文章的过程： 删除本地文件进入到 \sourse\_post 文件夹下，找到hellowworld.md 文件，执行本地删除； 生成静态文件启动命令行，进入 blog 文件夹中，在命令行中执行如下命令： 1hexo g 小提示：在某些情况，如果发现您对站点的更改无论如何也不生效，您可能需要运行 clean 命令hexo clean 将博客部署到 github 上启动命令行，进入 blog 文件夹中，在命令行中执行如下命令：1hexo d 创建文章创建文章的方法与删除文章类似，具体过程如下： 创建本地博客文章启动命令行，进入 blog 文件夹中，在命令行中执行如下命令： 1hexo new "My New Post" 编写博客文章在 \sourse\_post 中，找到新建的文章 My New Post，使用编辑器编写博客文章； 生成静态文件步骤与删除文件中步骤 2 相同； 12hexo cleanhexo g 将博客部署到 github 上步骤与删除文件中步骤 3 相同； 1hexo d]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>-笔记</tag>
      </tags>
  </entry>
</search>
